[{"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\index.js":"1","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\App.js":"2","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\SignIn.js":"3","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\NewEntry.js":"4","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\MealPlan.js":"5","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\MyTracker.js":"6","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\store\\UserContext.js":"7","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\layout\\Layout.js":"8","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\UI\\Alerts.js":"9","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\UI\\List.js":"10","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\api\\firebase.js":"11","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\layout\\MainNavigation.js":"12"},{"size":261,"mtime":1639340554807,"results":"13","hashOfConfig":"14"},{"size":2206,"mtime":1639348989060,"results":"15","hashOfConfig":"14"},{"size":3494,"mtime":1639098738268,"results":"16","hashOfConfig":"14"},{"size":7751,"mtime":1639354091508,"results":"17","hashOfConfig":"14"},{"size":994,"mtime":1639256661663,"results":"18","hashOfConfig":"14"},{"size":5486,"mtime":1639361470642,"results":"19","hashOfConfig":"14"},{"size":581,"mtime":1639256825199,"results":"20","hashOfConfig":"14"},{"size":336,"mtime":1639341744348,"results":"21","hashOfConfig":"14"},{"size":473,"mtime":1639285441176,"results":"22","hashOfConfig":"14"},{"size":1732,"mtime":1639344577463,"results":"23","hashOfConfig":"14"},{"size":659,"mtime":1639256480556,"results":"24","hashOfConfig":"14"},{"size":1954,"mtime":1639342043650,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1y6f16u",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\index.js",[],["53","54"],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\App.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\SignIn.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\NewEntry.js",["55","56","57","58"],"import React from \"react\";\r\nimport UserContext from \"../store/UserContext\";\r\nimport ListDividers from \"../components/UI/List\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport DescriptionAlerts from \"../components/UI/Alerts\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport firebase from \"../api/firebase\";\r\nimport { collection, doc, setDoc } from \"firebase/firestore\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport { Typography } from \"@mui/material\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport AlertTitle from \"@mui/material/AlertTitle\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nconst isEmpty = (value) => value.trim() === \"\";\r\n\r\nconst options = [\"Breakfast\", \"Lunch\", \"Dinner\", \"Snacks\"];\r\n\r\nconst buttonStyle = {\r\n  margin: \".5rem\",\r\n  borderRadius: \"25px\",\r\n  lineHeight: \"26.4px\",\r\n};\r\n\r\nconst buttonStyle2 = {\r\n  gridColumn: \"1\",\r\n  width: 200,\r\n  height: 50,\r\n  textAlign: \"center\",\r\n  borderRadius: \"25px\",\r\n};\r\n\r\nconst boxStyle1 = {\r\n  width: 225,\r\n  height: 255,\r\n  borderRadius: \"25px\",\r\n  paddingTop: \"10px\",\r\n  paddingLeft: \"10px\",\r\n  backgroundColor: \"#DBA380\",\r\n  borderStyle: \"solid\",\r\n  display: \"grid\",\r\n  gridTemplateColumns: \"repeat(3, 1fr)\",\r\n  gridTemplateRows: \"repeat(3, 1fr)\",\r\n};\r\n\r\nconst boxStyle2 = {\r\n  paddingTop: \"7px\",\r\n  borderRadius: \"25px\",\r\n  width: 200,\r\n  height: 65,\r\n  textAlign: \"center\",\r\n  backgroundColor: \"#9F5C2D\",\r\n  borderStyle: \"solid\",\r\n  gridColumn: \"span 2\",\r\n};\r\n\r\nconst fontFamily = 'roboto';\r\nconst fontSize = 18;\r\nconst fontWeight = 700;\r\n\r\n\r\nconst NewEntry = (props) => {\r\n  const { user } = React.useContext(UserContext);\r\n  const [subs, setSubs] = React.useState([]);\r\n  const [loaded, isLoaded] = React.useState(false);\r\n  const [selectedSearch, isSearching] = React.useState(\"\");\r\n  const [dateSelected, setDateSelected] = React.useState(new Date());\r\n  const [searchStarted, setSearchStarted] = React.useState(false);\r\n  const [value, setValue] = React.useState(options[0]);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [displayAlert, setDisplayAlert] = React.useState(false);\r\n  const [displaySearchAlert, setDisplaySearchAlert] = React.useState(false);\r\n\r\n  const fetchMeals = async (event) => {\r\n    event.preventDefault();\r\n    setSearchStarted(true);\r\n\r\n    const searchIsValid = !isEmpty(selectedSearch);\r\n    if (!searchIsValid) {\r\n      setDisplaySearchAlert(true);\r\n    } else {\r\n      setDisplaySearchAlert(false);\r\n    }\r\n\r\n    const url = `https://api.edamam.com/api/food-database/v2/parser?app_id=08ccfbe5&app_key=%20fc8b065b7c50db00c72dd76e96abb3ca&ingr=${selectedSearch}&nutrition-type=cooking`;\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: \"GET\",\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const responseData = await response.json();\r\n      const loadedSubs = [];\r\n\r\n      loadedSubs.push({\r\n        text: responseData.text,\r\n        calories: Math.trunc(responseData.hints[0].food.nutrients.ENERC_KCAL),\r\n        protein: Math.trunc(responseData.hints[0].food.nutrients.PROCNT),\r\n        fat: Math.trunc(responseData.hints[0].food.nutrients.FAT),\r\n      });\r\n      setSubs(loadedSubs);\r\n      isLoaded(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setSearchStarted(false);\r\n  };\r\n\r\n  const searchHandler = (event) => {\r\n    setDisplayAlert(false);\r\n    isSearching(event.target.value);\r\n  };\r\n\r\n  const iAteThisThing = async () => {\r\n    const searchIsValid = !isEmpty(selectedSearch);\r\n    if (!searchIsValid) {\r\n      setDisplaySearchAlert(true);\r\n      return;\r\n    } else {\r\n      const foodEntriesRef = collection(firebase.db, \"food-entries\");\r\n      const refID = Math.floor(Math.random() * 100);\r\n\r\n      const dateObj = dateSelected;\r\n      const month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n      const day = dateObj.getUTCDate() - 1;\r\n      const year = dateObj.getUTCFullYear();\r\n\r\n      const newdate = year + '/' + month + '/' + day;\r\n\r\n      await setDoc(doc(foodEntriesRef), {\r\n        category: \"Generic Foods\",\r\n        date: newdate,\r\n        fat: subs[0].fat,\r\n        protein: subs[0].protein,\r\n        label: subs[0].text,\r\n        kcal: subs[0].calories,\r\n        uid: user?.user?.uid,\r\n        refid: refID,\r\n        whenate: inputValue,\r\n      });\r\n      setDisplayAlert(true);\r\n      setDisplaySearchAlert(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"secondary\">Food you ate</Typography> &nbsp;\r\n          <input className=\"input_example\" onChange={searchHandler}></input>\r\n          <Button style={buttonStyle} variant=\"contained\" onClick={fetchMeals}>\r\n            Search\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={8}></Grid>\r\n        <Grid item xs={4}>\r\n          \r\n            <Autocomplete\r\n              value={value}\r\n              onChange={(event, newValue) => {\r\n                setValue(newValue);\r\n              }}\r\n              inputValue={inputValue}\r\n              onInputChange={(event, newInputValue) => {\r\n                setInputValue(newInputValue);\r\n              }}\r\n              id=\"controllable-states-demo\"\r\n              options={options}\r\n              sx={{ width: 300 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Select when you ate this item\" sx={{label: {fontFamily}, label: {fontSize}, label: {fontWeight}}} />\r\n              )}\r\n            />\r\n         \r\n        </Grid>\r\n        <Grid item xs={8}></Grid>\r\n        <Grid item xs={3}>\r\n          {searchStarted && (\r\n            <Box sx={{ display: \"flex\", margin: \"1rem\" }}>\r\n              <CircularProgress />\r\n            </Box>\r\n          )}\r\n          {loaded && (\r\n            <ListDividers\r\n              text={subs[0].text}\r\n              calories={subs[0].calories}\r\n              protein={subs[0].protein}\r\n              fat={subs[0].fat}\r\n            ></ListDividers>\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={9}>\r\n          <Box style={boxStyle1}>\r\n            <Box style={boxStyle2}>\r\n              <Typography variant=\"primary\">Total Calories</Typography>\r\n              {loaded && <Typography> {subs[0].calories}</Typography>}\r\n            </Box>\r\n            &nbsp;\r\n            <DesktopDatePicker\r\n              label=\"Please enter a date\"\r\n              value={dateSelected}\r\n              maxDate={new Date()}\r\n              minDate={new Date('2021-12-01')}\r\n              onChange={(newValue) => {\r\n                setDateSelected(newValue);\r\n              }}\r\n              renderInput={(params) => <TextField {...params} sx={{label: {fontFamily}, label: {fontSize}, label: {fontWeight}}}/>}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              style={buttonStyle2}\r\n              onClick={iAteThisThing}\r\n            >\r\n              Submit Entry\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {displayAlert && <DescriptionAlerts severity=\"success\" />}\r\n          {displaySearchAlert && (\r\n            <Stack sx={{ width: \"100%\" }} spacing={2}>\r\n              <Alert severity=\"warning\">\r\n                <AlertTitle>Warning</AlertTitle>\r\n                Your search is invalid —{\" \"}\r\n                <strong>Please enter a valid search</strong>\r\n              </Alert>\r\n            </Stack>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewEntry;\r\n","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\MealPlan.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\pages\\MyTracker.js",["59","60","61","62"],"import React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {\r\n  collection,\r\n  deleteDoc,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport firebase from \"../api/firebase\";\r\nimport UserContext from \"../store/UserContext\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { DesktopDatePicker } from \"@mui/lab\";\r\nimport { TextField } from \"@mui/material\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Box } from \"@mui/material\";\r\n\r\nconst fontFamily = 'roboto';\r\nconst fontSize = 18;\r\nconst fontWeight = 700;\r\n\r\nconst boxStyle2 = {\r\n  paddingTop: \"7px\",\r\n  borderRadius: \"25px\",\r\n  width: 900,\r\n  height: 65,\r\n  textAlign: \"center\",\r\n  backgroundColor: \"white\",\r\n  borderStyle: \"solid\",\r\n  gridColumn: \"span 2\",\r\n};\r\n\r\n\r\n\r\n\r\nconst MyTracker = () => {\r\n  const { user } = React.useContext(UserContext);\r\n  const [entries, setEntries] = React.useState([]);\r\n  const [dateSelected, setDateSelected] = React.useState(new Date());\r\n  const [progress, setProgress] = React.useState(10);\r\n  const [calorieSum, setCalorieSum] = React.useState([0]);\r\n\r\n  const trackDeleteHandler = (data) => {\r\n    deleteDoc(doc(firebase.db, \"food-entries\", `${data.id}`));\r\n    setEntries(entries.filter((entry) => entry.id !== data.id));\r\n  };\r\n\r\n  // React.useEffect(() => {\r\n  //   const timer = setInterval(() => {\r\n  //     setProgress((oldProgress) => {\r\n  //       if (oldProgress === 100) {\r\n  //         return 100;\r\n  //       }\r\n  //       const diff = Math.random() * 10;\r\n  //       return Math.min(oldProgress + diff, 100);\r\n  //     });\r\n  //   }, 500);\r\n\r\n  //   return () => {\r\n  //     clearInterval(timer);\r\n  //   };\r\n  // }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (user?.user?.uid) {\r\n      const entriesRef = collection(firebase.db, \"food-entries\");\r\n\r\n      \r\n\r\n      const dateObj = dateSelected;\r\n        const month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n        const day = dateObj.getUTCDate()- 1;\r\n        const year = dateObj.getUTCFullYear();\r\n\r\n        const newdate = year + '/' + month + '/' + day;\r\n\r\n      //const q = query(entriesRef, where(\"uid\", \"==\", user?.user?.uid));\r\n      const qTwo = query(entriesRef, where(\"date\", \"==\", newdate));\r\n\r\n      console.log(newdate);\r\n\r\n      (async () => {\r\n        const fetchedEntries = [];\r\n        const fetchedCalories = [];\r\n        const reducer = (accumulator, curr) => accumulator + curr;\r\n\r\n        const docs = await getDocs(qTwo);\r\n\r\n        docs.forEach((doc) => {\r\n          fetchedEntries.push({ data: doc.data(), id: doc.id });\r\n          fetchedCalories.push(doc.data().kcal)\r\n        });\r\n\r\n        console.log(fetchedEntries);\r\n        console.log(fetchedCalories);\r\n\r\n        const setSum = fetchedCalories.reduce(reducer, 0);\r\n        console.log(setSum);\r\n        setCalorieSum(setSum);\r\n        console.log(calorieSum);\r\n       \r\n        if ((calorieSum/20) >= 100)\r\n        {\r\n          setProgress(100);\r\n          setEntries(fetchedEntries);\r\n        } else{\r\n        setProgress(calorieSum/20);\r\n        setEntries(fetchedEntries);\r\n        }\r\n      })();\r\n    }\r\n  }, [user?.user?.uid, dateSelected],);\r\n\r\n\r\n  console.log(progress);\r\n  return (\r\n    <Grid container direction=\"row\" spacing={2}>\r\n\r\n<Grid item xs={4}>\r\n<DesktopDatePicker\r\n              label=\"Please select a date to review entries\"\r\n              value={dateSelected}\r\n              maxDate={new Date()}\r\n              minDate={new Date('2021-12-01')}\r\n              onChange={(newValue) => {\r\n                setDateSelected(newValue);\r\n                \r\n              }}\r\n              renderInput={(params) => <TextField {...params} sx={{label: {fontFamily}, label: {fontSize}, label: {fontWeight}}}/>}\r\n            />\r\n  </Grid>\r\n  <Grid item xs={8}>\r\n    <Typography variant='smalltext'>Calories % of goal</Typography>\r\n  <Box  sx={{ width: '300px' }}>\r\n      <LinearProgress variant=\"determinate\" value={progress} valueBuffer='0' />\r\n    </Box>\r\n\r\n  </Grid>\r\n      {entries.map((data) => (\r\n        <Grid item xs={4}>\r\n          <Card\r\n            variant=\"outlined\"\r\n            sx={{\r\n              backgroundColor: \"#DBA380\",\r\n              height: \"220px\",\r\n              width: \"210px\",\r\n            }}\r\n          >\r\n            <Typography variant=\"secondary\">\r\n              &nbsp;Item: <em>{data.data.label}</em>\r\n            </Typography>\r\n            <br />\r\n            <Typography variant=\"secondary\">\r\n              &nbsp;Ate During: <em>{data.data.whenate} </em>\r\n            </Typography>\r\n            <br />\r\n            <Typography variant=\"secondary\">\r\n              &nbsp;Calories: <em>{data.data.kcal}</em>\r\n            </Typography>\r\n            <br />\r\n            <Typography variant=\"secondary\">\r\n              &nbsp;Date:{\" \"}\r\n              <em>{data.data.date}</em>\r\n            </Typography>\r\n            <br />\r\n            <Button\r\n              onClick={() => trackDeleteHandler(data)}\r\n              sx={{\r\n                borderRadius: \"25px\",\r\n                backgroundColor: \"#9F5C2D\",\r\n                color: \"black\",\r\n                margin: \"1rem\",\r\n                \"&:hover\": {\r\n                  backgroundColor: \"red\",\r\n                },\r\n              }}\r\n            >\r\n              Remove Entry\r\n            </Button>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MyTracker;\r\n","C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\store\\UserContext.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\layout\\Layout.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\UI\\Alerts.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\UI\\List.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\api\\firebase.js",[],"C:\\Users\\ambient\\Desktop\\react-food-search-app27\\src\\components\\layout\\MainNavigation.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":178,"column":104,"nodeType":"69","messageId":"70","endLine":178,"endColumn":109},{"ruleId":"67","severity":1,"message":"68","line":178,"column":123,"nodeType":"69","messageId":"70","endLine":178,"endColumn":128},{"ruleId":"67","severity":1,"message":"68","line":214,"column":89,"nodeType":"69","messageId":"70","endLine":214,"endColumn":94},{"ruleId":"67","severity":1,"message":"68","line":214,"column":108,"nodeType":"69","messageId":"70","endLine":214,"endColumn":113},{"ruleId":"71","severity":1,"message":"72","line":25,"column":7,"nodeType":"73","messageId":"74","endLine":25,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":115,"column":6,"nodeType":"77","endLine":115,"endColumn":37,"suggestions":"78"},{"ruleId":"67","severity":1,"message":"68","line":132,"column":89,"nodeType":"69","messageId":"70","endLine":132,"endColumn":94},{"ruleId":"67","severity":1,"message":"68","line":132,"column":108,"nodeType":"69","messageId":"70","endLine":132,"endColumn":113},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-dupe-keys","Duplicate key 'label'.","ObjectExpression","unexpected","no-unused-vars","'boxStyle2' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'calorieSum'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProgress' needs the current value of 'calorieSum'.","ArrayExpression",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [user?.user?.uid, dateSelected, calorieSum]",{"range":"84","text":"85"},[3216,3247],"[user?.user?.uid, dateSelected, calorieSum]"]